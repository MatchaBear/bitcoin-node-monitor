#!/bin/bash
q
# Function to check node details
check_node() {
    echo "=== Node Status ==="
    
    # Get blockchain info
    sync_info=$(docker exec bitcoin-node bitcoin-cli -rpcuser=bitcoinrpc -rpcpassword=vlN3waFpwnSP90urI8zXxI0L0ZWpzcxN getblockchaininfo)
    if [ $? -eq 0 ]; then
        headers=$(echo "$sync_info" | grep '"headers"' | grep -o '[0-9]*')
        blocks=$(echo "$sync_info" | grep '"blocks"' | grep -o '[0-9]*')
        if [ ! -z "$headers" ] && [ "$headers" -gt 0 ]; then
            sync_percent=$(echo "scale=2; $blocks * 100 / $headers" | bc)
            echo "Sync Progress: $sync_percent%"
        fi
        echo "Block Height: $(printf "%'d" $blocks) / $(printf "%'d" $headers)"
        
        # Get network info
        network_info=$(docker exec bitcoin-node bitcoin-cli -rpcuser=bitcoinrpc -rpcpassword=vlN3waFpwnSP90urI8zXxI0L0ZWpzcxN getnetworkinfo)
        connections=$(echo "$network_info" | grep '"connections"' | grep -o '[0-9]*')
        echo "Connected Peers: $connections"
        
        # Get memory pool info
        mempool_info=$(docker exec bitcoin-node bitcoin-cli -rpcuser=bitcoinrpc -rpcpassword=vlN3waFpwnSP90urI8zXxI0L0ZWpzcxN getmempoolinfo)
        mempool_size=$(echo "$mempool_info" | grep '"size"' | grep -o '[0-9]*')
        mempool_bytes=$(echo "$mempool_info" | grep '"bytes"' | grep -o '[0-9]*')
        echo "Mempool Transactions: $(printf "%'d" $mempool_size)"
        echo "Mempool Size: $(echo "scale=2; $mempool_bytes/1024/1024" | bc) MB"
        
        # Get network stats
        net_totals=$(docker exec bitcoin-node bitcoin-cli -rpcuser=bitcoinrpc -rpcpassword=vlN3waFpwnSP90urI8zXxI0L0ZWpzcxN getnettotals)
        total_received=$(echo "$net_totals" | grep '"totalbytesrecv"' | grep -o '[0-9]*')
        total_sent=$(echo "$net_totals" | grep '"totalbytessent"' | grep -o '[0-9]*')
        echo "Total Received: $(echo "scale=2; $total_received/1024/1024" | bc) MB"
        echo "Total Sent: $(echo "scale=2; $total_sent/1024/1024" | bc) MB"
    else
        echo "Error: Could not connect to Bitcoin node"
    fi
}

# Function to check node health and alerts
check_node_health() {
    local status=0

    # Check if node is responding
    if ! docker exec bitcoin-node bitcoin-cli -rpcuser=bitcoinrpc -rpcpassword=vlN3waFpwnSP90urI8zXxI0L0ZWpzcxN getblockchaininfo > /dev/null 2>&1; then
        echo "❌ ALERT: Bitcoin node is not responding!"
        status=1
    fi

    # Check peer connections
    local peers=$(docker exec bitcoin-node bitcoin-cli -rpcuser=bitcoinrpc -rpcpassword=vlN3waFpwnSP90urI8zXxI0L0ZWpzcxN getconnectioncount 2>/dev/null)
    if [ "$peers" -lt 3 ]; then
        echo "⚠️  WARNING: Low peer count ($peers connections)"
        status=1
    fi

    # Check sync status
    local sync_info=$(docker exec bitcoin-node bitcoin-cli -rpcuser=bitcoinrpc -rpcpassword=vlN3waFpwnSP90urI8zXxI0L0ZWpzcxN getblockchaininfo 2>/dev/null)
    if [ $? -eq 0 ]; then
        local headers=$(echo "$sync_info" | grep '"headers"' | grep -o '[0-9]*')
        local blocks=$(echo "$sync_info" | grep '"blocks"' | grep -o '[0-9]*')
        local behind=$((headers - blocks))
        if [ $behind -gt 1000 ]; then
            echo "⚠️  WARNING: Node is $(printf "%'d" $behind) blocks behind"
            status=1
        fi
    fi

    return $status
}

# Function to calculate supply
calculate_supply() {
    local height=$1
    local total=0
    local reward=50
    local halving=210000
    
    # Calculate number of complete halvings
    local complete_halvings=$((height / halving))
    
    # Calculate blocks in current era
    local remaining_blocks=$((height % halving))
    
    # Calculate supply for complete eras
    for ((i=0; i<complete_halvings; i++)); do
        local era_reward=$((50 / (1 << i)))
        total=$((total + (era_reward * halving)))
    done
    
    # Add current era
    local current_reward=$((50 / (1 << complete_halvings)))
    total=$((total + (current_reward * remaining_blocks)))
    
    echo $total
}

# Function to format time until halving
format_time_until_halving() {
    local current_height=$1
    local next_halving=$((((current_height/210000)+1)*210000))
    local blocks_until=$((next_halving - current_height))
    local minutes=$((blocks_until * 10))
    local days=$((minutes / 1440))
    local months=$((days / 30))
    
    if [ $months -gt 0 ]; then
        echo "approximately $months months"
    else
        echo "approximately $days days"
    fi
}

# Replace the check_supply function with this corrected version
check_supply() {
    echo "=== Bitcoin Supply Information (until current block download) ==="
    
    # Get current block height
    local blockchain_info=$(docker exec bitcoin-node bitcoin-cli -rpcuser=bitcoinrpc -rpcpassword=vlN3waFpwnSP90urI8zXxI0L0ZWpzcxN getblockchaininfo 2>/dev/null)
    local current_height=$(echo "$blockchain_info" | grep '"blocks"' | grep -o '[0-9]*')
    
    if [ -z "$current_height" ]; then
        current_height=0
    fi
    
    # Calculate current supply
    local total_supply=$(calculate_supply $current_height)
    
    # Constants
    local max_supply=21000000
    local halving_interval=210000
    local blocks_per_day=144  # 6 blocks per hour * 24 hours
    local blocks_per_year=$((blocks_per_day * 365))
    
    # Calculate remaining supply
    local remaining=$((max_supply - total_supply))
    local percent_mined=$(echo "scale=2; $total_supply * 100 / $max_supply" | bc)
    
    # Calculate next halving information
    local next_halving=$((((current_height/halving_interval)+1)*halving_interval))
    local current_era=$((current_height / halving_interval))
    local current_reward=$(echo "scale=8; 50 / (2 ^ $current_era)" | bc)
    local blocks_to_next_halving=$((next_halving - current_height))
    local time_until_halving=$(format_time_until_halving $current_height)
    
    # Calculate years until max supply (estimated to be 2140)
    local current_year=$(date +%Y)
    local years_remaining=$((2140 - current_year))
    
    echo "Current Block Height: $(printf "%'d" $current_height)"
    echo "Current Supply: $(printf "%'d" $total_supply) BTC"
    echo "Remaining Supply: $(printf "%'d" $remaining) BTC"
    echo "Percent Mined: $percent_mined%"
    echo "Current Block Reward: $current_reward BTC"
    echo -e "\nHalving Information:"
    echo "Next halving at block: $(printf "%'d" $next_halving)"
    echo "Time until next halving: $time_until_halving"
    echo "Years until max supply: $years_remaining years (approx. year 2140)"
}

# Function to check Bitcoin price
check_price() {
    price_data=$(curl -s "https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd,sgd,idr&include_24h_change=true")
    if [[ $price_data == *"usd"* ]]; then
        usd_price=$(echo $price_data | grep -o '"usd":[0-9.]*' | cut -d':' -f2)
        sgd_price=$(echo $price_data | grep -o '"sgd":[0-9.]*' | cut -d':' -f2)
        idr_price=$(echo $price_data | grep -o '"idr":[0-9.]*' | cut -d':' -f2)
        usd_change=$(echo $price_data | grep -o '"usd_24h_change":[0-9.-]*' | cut -d':' -f2)
        
        echo "Bitcoin Price:"
        echo "USD: \$$(printf "%'.2f" $usd_price) ($(printf "%+.2f%%" $usd_change))"
        echo "SGD: S\$$(printf "%'.2f" $sgd_price)"
        echo "IDR: Rp.$(printf "%'.2f" $idr_price)"
    else
        echo "Error: Could not fetch price data"
    fi
}

# Function to show all info
check_all() {
    clear
    echo "========================================"
    echo "       Bitcoin Dashboard"
    echo "Time: $(date '+%Y-%m-%d %H:%M:%S')"
    echo "========================================"
    
    # Check node health first
    check_node_health
    local node_status=$?
    
    if [ $node_status -eq 0 ]; then
        echo "✅ Node Status: Healthy"
    fi
    echo
    
    check_price
    echo
    check_supply
    echo
    check_node
}

case "$1" in
    "price")
        check_price
        ;;
    "node")
        check_node
        ;;
    "supply")
        check_supply
        ;;
    "health")
        check_node_health
        ;;
    "all")
        check_all
        ;;
    *)
        echo "Usage: btc-tools [price|node|supply|health|all]"
        echo "  price  : Show current Bitcoin price"
        echo "  node   : Show detailed node status"
        echo "  supply : Show supply information"
        echo "  health : Check node health"
        echo "  all    : Show complete dashboard"
        ;;
esac
